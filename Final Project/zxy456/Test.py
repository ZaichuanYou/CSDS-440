import pandas as pd
import numpy as np
import math
from sklearn.linear_model import LinearRegression
from MI_SVM import SVM, new_val
from MIL_dis import validate

import util

"""
data = pd.read_csv("C:\\Users\\21995\\Desktop\\Computer Science\\CSDS 440\\Final Project\\Musk2.csv", index_col=False, header=None)

new_data = {}
for index, value in enumerate(data[1].value_counts()):
    temp = {}
    temp["data"] = data.loc[data[1]==index+1].drop([0,1], axis=1)
    temp["class"] = data.loc[data[1]==index+1][0].mean()
    new_data[index+1]=temp

bags=[]
labels=[]
for a in new_data:
    bags.append(new_data[a]["data"])
    labels.append(new_data[a]["class"])

def Euclid_dis_mean_min(a,b):
    a = a.to_numpy()
    b = b.to_numpy()
    min = 999999999999999999
    for bi in b:
        temp_min = 0
        for ai in a:
            temp_min += np.sqrt(((bi-ai)**2).sum())
        temp_min = temp_min/len(a)
        if temp_min < min:
            min = temp_min
    return min

new_set = np.zeros((len(bags),len(bags)))
for a in range(0, len(bags)):
    for b in range(0, len(bags)):
        new_set[a][b]=Euclid_dis_mean_min(bags[a], bags[b])


reg = LinearRegression().fit(new_set, labels)
print(reg.score(new_set, labels))"""

#examples, labels, data, bags, bag_labels= load_data_mi("/content/drive/Othercomputers/My Laptop/Final Project/Musk1.csv")
# examples, bags, labels = util.load_data("/content/drive/Othercomputers/My Laptop/Final Project", "Musk1.csv")
# print(len(examples), len(bags), len(labels))                    
# for label in range(0, len(labels)):
#     if labels[label] == 0:
#         labels[label] = -1
# y_label = {}
# for bag in range(0, len(bags)):
#     for example in bags[bag]:
#         y_label[example] = labels[bag]
# print(y_label)     
# y = np.array(list(y_label.values()))
# print(y)
# svm = SVM(0.01, 0.1)
#svm.train_mi_svm(examples, labels, data)
# svm.set_w([-42.75775430353607, 54.07455986111466, -25.9168983865922, -3.6462350842218028, 7.859540994784629, -34.14250274443951, 8.177956298196442, -11.613283280929496, 12.854582117061959, 26.71606982644549, 117.56400822280861, 32.10882780453498, -9.151706305771476, -117.34372950388105, 33.42457183398116, -52.44306498737886, 77.69956181338782, 70.02958272228868, 4.9355851166377604, -56.23611436178182, -34.80288359591761, -16.638944284685092, -20.130742217905308, -49.933775827812255, 76.67235024993558, -45.74972110517166, 119.6642784101457, -100.174373148106, 5.536605135870367, 39.36019521641369, -93.88971254796273, -24.52654362240979, -46.00654572310619, 76.59864249150637, -28.16339070898056, -35.535594355790465, -38.41368435710229, 50.22510079417928, 12.90783799356486, -67.99491767335145, -77.57202055825704, 20.414897159358414, 29.025492580582352, -51.7382040504917, -51.10277530688668, 77.78474448373828, -13.812943983014675, 138.5418450798733, -73.69478494588425, 7.772928156974016, 23.367866990792724, 4.462904408530404, -19.978039811821525, -4.444696681840313, 61.79445161228829, 89.28939198822077, 11.222670112795893, 8.700034847077177, 57.62873298604607, -18.302137306780068, -11.429368407231665, 63.527169898966065, 17.592746060072344, 12.361491253368063, -11.000460502540378, -32.91398967065156, 66.52267160090689, 5.302530325835781, 135.20286010801345, -58.493723705309485, -39.90859389913031, 15.868806706865795, 145.7536568725641, -14.158107547710811, -55.12328409828098, 55.72838153284065, -24.921647112587305, 16.198637765225108, -30.314696136150776, 2.1248538808291175, 42.96865333172648, -2.0610500673994334, 9.674179851640046, -30.782812533745833, -42.121087534771256, -21.69882789666131, 49.42173965347477, -30.44566039230736, -1.354531583154396, -9.746034410934104, -10.517310735832789, -65.2204368391631, -26.40638034611221, 57.83109186732137, 10.309829009888121, -47.096282222204486, -35.630758801122276, -117.93376112173117, 23.78691118213701, 22.992208612777418, -39.82298830501933, 12.844530606565078, 15.146825640074388, -10.788566909400343, -42.81378580046088, -59.9175051986919, -18.51157177693676, 109.05683094495194, 66.52795608035245, -23.011566112698915, 13.587162461221784, -19.990426980039274, 36.28564574308409, 98.90919540471084, -48.62423571291406, 121.98210504583687, 18.467766724307594, 48.27679514117696, -22.879249202153876, -6.276992945946691, 54.96492046320772, -5.940774006387509, -80.36528622981346, 71.53960852710817, 42.011484032332184, -19.998175293613382, -46.268548185993005, 28.943122201486418, -50.89051926206957, -11.673161457879127, -41.22633458360257, -39.48088091626751, -56.25854771897817, -46.01849823996832, 96.43406765721333, 28.591312940289704, -2.1355309542487713, -170.6546455102919, -76.11506653106643, -40.64965378935684, -7.381162489645336, 1.9732446874514424, 30.97700622812443, -53.46390306289505, 44.18061792600075, 47.767998738006156, -17.979968822997858, -7.873651602980631, 27.925421557248654, 7.985052030007342, -11.913528679422495, 1.5744423339705191, 57.953206757633936, 12.675898000420961, 68.86002538221528, -46.8525890485858, -4.762075495837237, -86.7337060813292, 79.34329396550544, -56.25594927933543, -81.91066833667162, 9.517078387198113, -70.64826230326388, -3.731743328084273, 4.563369485017872, 2.84405779375264])

# y_hat = svm.predict_bag(bags)


# examples, labels, data, bags, bag_labels= load_data_mi("/content/drive/Othercomputers/My Laptop/Final Project/Musk1.csv")
# print(bag_labels, y_hat)
# print(accuracy(bag_labels, y_hat))
#folds = util.cv_split(np.array(bags), np.array(bag_labels), 5)
new_val()
